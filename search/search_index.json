{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PT Library Documentation URL: Package Published link This documentation demonstrate the usage of various PT Library for internal use. Installation To use PT Library, first install it using pip: pip install pt_library","title":"About"},{"location":"#welcome-to-pt-library-documentation","text":"URL: Package Published link This documentation demonstrate the usage of various PT Library for internal use.","title":"Welcome to PT Library Documentation"},{"location":"#installation","text":"To use PT Library, first install it using pip: pip install pt_library","title":"Installation"},{"location":"contributor/","text":"Coming soon","title":"Contributor"},{"location":"usage/","text":"Documentation Notification Sends a notification to the telegram channel. from pt_library import telegram_notification response = telegram_notification(token, chat_id, message) # Params: token: str, chat_id: str, message:str # Return: response: requests.models.Response Date-time There are two functions, which return current date and previous month date. from pt_library import get_previous_month_year, get_current_month_year, get_timestamp print(get_previous_month_year()) print(get_current_month_year()) print(get_timestamp()) # {year: '2023',month: '11'} # {year: '2023',month: '12', day: '05'} # 2023-12-05 16:34:05 -> str SQL Queries Executes SQL query and returns the result. from pt_library import run_query result = run_query(host, user, password, database, query) # Params: host: str, user: str, password:str, database:str, query:str # Return: tuple Decorators Runtime calculation Calculates the function execution time in minutes from pt_library import calculate_time @calculate_time def api_call(): pass","title":"Usage"},{"location":"usage/#documentation","text":"","title":"Documentation"},{"location":"usage/#notification","text":"Sends a notification to the telegram channel. from pt_library import telegram_notification response = telegram_notification(token, chat_id, message) # Params: token: str, chat_id: str, message:str # Return: response: requests.models.Response","title":"Notification"},{"location":"usage/#date-time","text":"There are two functions, which return current date and previous month date. from pt_library import get_previous_month_year, get_current_month_year, get_timestamp print(get_previous_month_year()) print(get_current_month_year()) print(get_timestamp()) # {year: '2023',month: '11'} # {year: '2023',month: '12', day: '05'} # 2023-12-05 16:34:05 -> str","title":"Date-time"},{"location":"usage/#sql-queries","text":"Executes SQL query and returns the result. from pt_library import run_query result = run_query(host, user, password, database, query) # Params: host: str, user: str, password:str, database:str, query:str # Return: tuple","title":"SQL Queries"},{"location":"usage/#decorators","text":"","title":"Decorators"},{"location":"usage/#runtime-calculation","text":"Calculates the function execution time in minutes from pt_library import calculate_time @calculate_time def api_call(): pass","title":"Runtime calculation"}]}